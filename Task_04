sensor_data = [
("S1", "2025-04-28 10:00", 35.2, 12.1, 0.002),
("S2", "2025-04-28 10:00", 36.5, 14.0, 0.003),
("S1", "2025-04-28 11:00", 36.1, 12.5, 0.0021),
("S3", "2025-04-28 10:00", 34.0, 11.8, 0.0025),
("S2", "2025-04-28 11:00", 37.2, 14.3, 0.0031),
("S1", "2025-04-28 12:00", 37.0, 13.0, 0.0022),
]

# Organize readings per sensor
sortedList = sorted(sensor_data)
print(sortedList, "\n")


# Group data by sensor using a dictionary (sensor_id as key, list of tuples as value)
sensor_dataDict ={ }

for sensor_id, timestamp, temperature, stress, displacement in sensor_data:
    reading = (timestamp, temperature, stress, displacement)
    if sensor_id in sensor_dataDict:
        sensor_dataDict[sensor_id].append(reading)
    else:
        sensor_dataDict[sensor_id] = [reading]
# result
for sensor, readings in sensor_dataDict.items():
    print(sensor, "=", readings, "\n")

#Compare readings from different time intervals
time_dict = { }

# function to create time_dict
for sensor_id, timestamp, temperature, stress, displacement in sensor_data:
    reading = (sensor_id, temperature, stress, displacement)
    if timestamp in time_dict:
        time_dict[timestamp].append(reading)
    else:
        time_dict[timestamp] = [reading]

for timestamp, readings in time_dict.items():
    print(timestamp, ":", readings)

# S1 Readings
print("Comparing readings for S1:")
for reading in sensor_dataDict["S1"]:
    print(reading)
# S2 Readings
print("Comparing readings for S2:")
for reading in sensor_dataDict["S2"]:
    print(reading)
# S3 Readings
print("Comparing readings for S3:")
for reading in sensor_dataDict["S3"]:
    print(reading, "\n")


# Extract all timestamps into a list and sort them
timestamps = [reading[1] for reading in sensor_data]
timestamps.sort()
print("Sorted Timestamps:", timestamps, "\n")

#   Identify unique sensors with extreme values
extreme_sensors = set()
for sensor_id, readings in sensor_dataDict.items():
    for reading in readings:
        temp = reading[1]
        if temp > 36.5:
            extreme_sensors.add(sensor_id)
        # extreme_sensors[sensor_id].appand(reading[0], temp, stress)
print("extreme_temp:", extreme_sensors, "\n")

# Use sets to find unique sensor IDs that recorded stress > 13.0
extreme_stress = set()
for sensor_id, readings in sensor_dataDict.items():
    for reading in readings:
        stress = reading[2]
        if stress > 13.0 :
            extreme_stress.add(sensor_id)

print("extreme_stress:", extreme_stress, "\n")

# Summarize the data by calculating max, min, and average readings per sensor
sensor_statistics = {}

for sensor_id, readings in sensor_dataDict.items():
    temps = []
    stresses = []
    for reading in readings:
        temps.append(reading[1])
        stresses.append(reading[2])

    temp_max = max(temps)
    temp_min = min(temps)
    temp_avg = sum(temps) / len(temps)

    stress_max = max(stresses)
    stress_min = min(stresses)
    stress_avg = sum(stresses) / len(stresses)

    sensor_statistics[sensor_id] = {
        "temperature": (temp_max, temp_min, round(temp_avg, 2)),
        "stress": (stress_max, stress_min, round(stress_avg, 2))
    }

# results
print("Sensor Statistics (Max, Min, Avg):")
for sensor, stats in sensor_statistics.items():
    print(f"{sensor}:")
    print(
        f"  Temperature --> Max: {stats['temperature'][0]}, Min: {stats['temperature'][1]}, Avg: {stats['temperature'][2]}")
    print(f"  Stress --> Max: {stats['stress'][0]}, Min: {stats['stress'][1]}, Avg: {stats['stress'][2]}")

# Max Displacement per sensor
print("Max Displacement per Sensor:")
for sensor_id, readings in sensor_dataDict.items():
    displacements = []
    for reading in readings:
        displacements.append(reading[3])

    disp_max = max(displacements)
    print(f"{sensor_id}: {disp_max}")
`
