import tkinter as tk
from tkinter import ttk

sensor_data = [
    ("S1", "2025-04-28 10:00", 35.2, 12.1, 0.002),
    ("S2", "2025-04-28 10:00", 36.5, 14.0, 0.003),
    ("S1", "2025-04-28 11:00", 36.1, 12.5, 0.0021),
    ("S3", "2025-04-28 10:00", 34.0, 11.8, 0.0025),
    ("S2", "2025-04-28 11:00", 37.2, 14.3, 0.0031),
    ("S1", "2025-04-28 12:00", 37.0, 13.0, 0.0022),
]

# Organize by sensor
sensor_dataDict = {}
for sensor_id, timestamp, temperature, stress, displacement in sensor_data:
    reading = (timestamp, temperature, stress, displacement)
    sensor_dataDict.setdefault(sensor_id, []).append(reading)

# GUI App
class SensorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Sensor Data Analysis")
        self.root.geometry("700x600")

        # Buttons
        ttk.Button(root, text="Organize by Sensor", command=self.organize_by_sensor).pack(pady=5)
        ttk.Button(root, text="Extreme Temperature/Stress", command=self.extreme_values).pack(pady=5)
        ttk.Button(root, text="Compare Time Intervals", command=self.compare_time_intervals).pack(pady=5)
        ttk.Button(root, text="Sensor Statistics", command=self.sensor_stats).pack(pady=5)
        ttk.Button(root, text="Max Displacement", command=self.max_displacement).pack(pady=5)
        ttk.Button(root, text="Sorted Timestamps", command=self.sorted_timestamps).pack(pady=5)
        ttk.Button(root, text="Most Recent Reading", command=self.recent_reading).pack(pady=5)

        # Output display
        self.output = tk.Text(root, wrap=tk.WORD, height=25)
        self.output.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

    def display(self, text):
        self.output.delete(1.0, tk.END)
        self.output.insert(tk.END, text)

    def organize_by_sensor(self):
        result = ""
        for sensor, readings in sensor_dataDict.items():
            result += f"{sensor}: {readings}\n\n"
        self.display(result)

    def extreme_values(self):
        extreme_temp = set()
        extreme_stress = set()
        for sensor_id, readings in sensor_dataDict.items():
            for timestamp, temp, stress, _ in readings:
                if temp > 36.5:
                    extreme_temp.add(sensor_id)
                if stress > 13.0:
                    extreme_stress.add(sensor_id)
        result = f"Extreme Temperature Sensors (>36.5): {extreme_temp}\n"
        result += f"Extreme Stress Sensors (>13.0): {extreme_stress}\n"
        self.display(result)

    def compare_time_intervals(self):
        time_dict = {}
        for sensor_id, timestamp, temp, stress, disp in sensor_data:
            time_dict.setdefault(timestamp, []).append((sensor_id, temp, stress, disp))
        result = ""
        for timestamp in sorted(time_dict):
            result += f"{timestamp}: {time_dict[timestamp]}\n"
        self.display(result)

    def sensor_stats(self):
        result = ""
        for sensor_id, readings in sensor_dataDict.items():
            temps = [r[1] for r in readings]
            stresses = [r[2] for r in readings]
            result += (
                f"{sensor_id}:\n"
                f"  Temp --> Max: {max(temps)}, Min: {min(temps)}, Avg: {round(sum(temps)/len(temps),2)}\n"
                f"  Stress --> Max: {max(stresses)}, Min: {min(stresses)}, Avg: {round(sum(stresses)/len(stresses),2)}\n\n"
            )
        self.display(result)

    def max_displacement(self):
        result = ""
        for sensor_id, readings in sensor_dataDict.items():
            max_disp = max([r[3] for r in readings])
            result += f"{sensor_id}: Max Displacement = {max_disp}\n"
        self.display(result)

    def sorted_timestamps(self):
        timestamps = sorted([timestamp for _, timestamp, _, _, _ in sensor_data])
        self.display("Sorted Timestamps:\n" + "\n".join(timestamps))

    def recent_reading(self):
        latest_readings = {}
        for sensor_id, readings in sensor_dataDict.items():
            latest = max(readings, key=lambda x: x[0])
            latest_readings[sensor_id] = latest
        result = "Most Recent Reading per Sensor:\n"
        for sid, reading in latest_readings.items():
            result += f"{sid}: {reading}\n"
        self.display(result)


# Run the app
root = tk.Tk()
app = SensorApp(root)
root.mainloop()
